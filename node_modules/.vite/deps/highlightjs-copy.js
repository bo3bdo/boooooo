import {
  __commonJS
} from "./chunk-UXIASGQL.js";

// node_modules/highlightjs-copy/index.js
var require_highlightjs_copy = __commonJS({
  "node_modules/highlightjs-copy/index.js"(exports, module) {
    var CopyButtonPlugin = class {
      /**
       * Create a new CopyButtonPlugin class instance
       * @param {Object} [options] - Functions that will be called when a copy event fires
       * @param {CopyCallback} [options.callback]
       * @param {Hook} [options.hook]
       * @param {String} [options.lang] Defaults to the document body's lang attribute and falls back to "en"
       */
      constructor(options = {}) {
        self.hook = options.hook;
        self.callback = options.callback;
        self.lang = options.lang || document.documentElement.lang || "en";
      }
      "after:highlightElement"({ el, text }) {
        var _a;
        let button = Object.assign(document.createElement("button"), {
          innerHTML: ((_a = locales[lang]) == null ? void 0 : _a[0]) || "Copy",
          className: "hljs-copy-button"
        });
        button.dataset.copied = false;
        el.parentElement.classList.add("hljs-copy-wrapper");
        el.parentElement.appendChild(button);
        el.parentElement.style.setProperty(
          "--hljs-theme-background",
          window.getComputedStyle(el).backgroundColor
        );
        button.onclick = function() {
          if (!navigator.clipboard)
            return;
          let newText = text;
          if (hook && typeof hook === "function") {
            newText = hook(text, el) || text;
          }
          navigator.clipboard.writeText(newText).then(function() {
            var _a2, _b;
            button.innerHTML = ((_a2 = locales[lang]) == null ? void 0 : _a2[1]) || "Copied!";
            button.dataset.copied = true;
            let alert = Object.assign(document.createElement("div"), {
              role: "status",
              className: "hljs-copy-alert",
              innerHTML: ((_b = locales[lang]) == null ? void 0 : _b[2]) || "Copied to clipboard"
            });
            el.parentElement.appendChild(alert);
            setTimeout(() => {
              var _a3;
              button.innerHTML = ((_a3 = locales[lang]) == null ? void 0 : _a3[0]) || "Copy";
              button.dataset.copied = false;
              el.parentElement.removeChild(alert);
              alert = null;
            }, 2e3);
          }).then(function() {
            if (typeof callback === "function")
              return callback(newText, el);
          });
        };
      }
    };
    module.exports = CopyButtonPlugin;
    var locales = {
      en: ["Copy", "Copied!", "Copied to clipboard"],
      es: ["Copiar", "¡Copiado!", "Copiado al portapapeles"],
      fr: ["Copier", "Copié !", "Copié dans le presse-papier"],
      de: ["Kopieren", "Kopiert!", "In die Zwischenablage kopiert"],
      ja: ["コピー", "コピーしました！", "クリップボードにコピーしました"],
      ko: ["복사", "복사됨!", "클립보드에 복사됨"],
      ru: ["Копировать", "Скопировано!", "Скопировано в буфер обмена"],
      zh: ["复制", "已复制!", "已复制到剪贴板"],
      "zh-tw": ["複製", "已複製!", "已複製到剪貼簿"]
    };
  }
});
export default require_highlightjs_copy();
//# sourceMappingURL=highlightjs-copy.js.map
